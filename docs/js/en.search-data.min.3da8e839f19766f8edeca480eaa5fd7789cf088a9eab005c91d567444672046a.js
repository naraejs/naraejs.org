'use strict';(function(){const indexCfg={};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','parent'],};const index=FlexSearch.create(indexCfg);window.geekdocSearchIndex=index;index.add({'id':0,'href':'/en/learn/stereotypes/connection_manager/transaction/','title':"Transaction",'parent':"@ConnectionManager",'content':"This page has not yet been translated.\n@Transaction 어노테이션을 메서드에 적용함으로써 자동화된 Transaction 처리가 가능합니다.\n트랜잭션을 지원하려면 ConnectionManager에서 transactional가 true이어야 하며 커넥션에서 ITransactionalConnection을 구현해야 합니다.\n반드시 @Transactional 메서드 내에서 getConnection을 호출해야 하며, 중첩된 @Transactional 사용시 트랜잭션이 전파됩니다.\nExample:\n@Service() class TestService { private _testCM: TestCM; constructor(@Inject(TestCM) testCM: TestCM) { this._testCM = testCM; } @Transactional() public methodB(a: number): Promise\u0026amp;lt;void\u0026amp;gt; { return this._testCM.getConnection() .then((connection) =\u0026amp;gt; { connection.insert(\u0026amp;#39;THIRD\u0026amp;#39;); connection.insert(\u0026amp;#39;FOURTH\u0026amp;#39;); }); } @Transactional() public methodA(a: number): Promise\u0026amp;lt;void\u0026amp;gt; { return this._testCM.getConnection() .then((connection) =\u0026amp;gt; { connection.insert(\u0026amp;#39;FIRST\u0026amp;#39;); connection.insert(\u0026amp;#39;SECOND\u0026amp;#39;); return this.methodB(); }); } } "});index.add({'id':1,'href':'/en/learn/stereotypes/component/','title':"@Component",'parent':"Stereo Types",'content':"This page has not yet been translated.\nDescription 특별한 기능은 없는 Singletone Bean Object를 만들기 위해 사용합니다.\nUsage import { installer, Component } from \u0026amp;#39;@naraejs/core\u0026amp;#39; @Component() class MyComponent { } export default installer; "});index.add({'id':2,'href':'/en/eco-system/core/','title':"core",'parent':"Eco System",'content':"This page has not yet been translated.\n\u0026lt;div class=\u0026quot;no-color-anker\u0026quot; style=\u0026quot;font-size: 1.5em\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://github.com/naraejs/naraejs\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fab fa-github\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;https://www.npmjs.com/package/@naraejs/core\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;https://img.shields.io/npm/v/@naraejs/core.svg\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;\nInstallation $ npm install --save @naraejs/core "});index.add({'id':3,'href':'/en/learn/stereotypes/','title':"Stereo Types",'parent':"Learn",'content':"This page has not yet been translated.\nUsage import { installer, Component } from \u0026amp;#39;@naraejs/core\u0026amp;#39; @Component() class MyComponent { } export default installer; "});index.add({'id':4,'href':'/en/learn/','title':"Learn",'parent':"Narae.js",'content':"This page has not yet been translated.\n배우기!\n"});index.add({'id':5,'href':'/en/learn/logging/','title':"Logging",'parent':"Learn",'content':"This page has not yet been translated.\nSimple Logging Facade 클래스에 @Slf 어노테이션을 적용하면 this.log 를 통해 Logger에 접근 가능하다.\nExample:\n@Slf({ namespace: \u0026amp;#39;your.namespace\u0026amp;#39; // Optional }) class SampleComponent implements Slfable { public log!: LoggerLike; public method() { this.log.info(\u0026amp;#39;...\u0026amp;#39;); } } "});index.add({'id':6,'href':'/en/eco-system/webserver-express/','title':"webserver-express",'parent':"Eco System",'content':"This page has not yet been translated.\n\u0026lt;div class=\u0026quot;no-color-anker\u0026quot; style=\u0026quot;font-size: 1.5em\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://github.com/naraejs/naraejs\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fab fa-github\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;https://www.npmjs.com/package/@naraejs/webserver-express\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;https://img.shields.io/npm/v/@naraejs/webserver-express.svg\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;\nInstallation $ npm install --save @naraejs/webserver-express Basic Code import * as naraejs from \u0026amp;#39;@naraejs/core\u0026amp;#39;; import * as webserverExpress from \u0026amp;#39;@naraejs/webserver-express\u0026amp;#39;; naraejs.install(webserverExpress); "});index.add({'id':7,'href':'/en/eco-system/','title':"Eco System",'parent':"Narae.js",'content':""});index.add({'id':8,'href':'/en/learn/stereotypes/module/','title':"@Module",'parent':"Stereo Types",'content':"This page has not yet been translated.\nDescription Module를 만들 때 사용합니다.\nModule 만들기 import { INaraeCore, Module } from \u0026amp;#39;@naraejs/core\u0026amp;#39; const S_MyModule = Symbol(\u0026amp;#39;MyModule\u0026amp;#39;); @Module() export class MyModule { private _core!: INaraeCore; constructor() { makeToModule(S_MyModule, this) .order(0) .start((core: INaraeCore) =\u0026amp;gt; { // START Handler  this._core = core; }) .stop(() =\u0026amp;gt; { // STOP Handler  }) .build(); } } "});index.add({'id':9,'href':'/en/learn/stereotypes/configuration/','title':"@Configuration",'parent':"Stereo Types",'content':"This page has not yet been translated.\nDescription 단독으로 보통 사용되진 않으며 다른 Module과 함께 작동합니다.\nUsage import { installer, Configuration } from \u0026amp;#39;@naraejs/core\u0026amp;#39; @Configuration() class MyConfiguration { } export default installer; Configuration 만들기 webserver-express의 소스 참고\n"});index.add({'id':10,'href':'/en/learn/stereotypes/connection_manager/','title':"@ConnectionManager",'parent':"Stereo Types",'content':"This page has not yet been translated.\nUsage import { installer, ConnectionManager, IConnectionManagerHandler } from \u0026amp;#39;@naraejs/core\u0026amp;#39; @ConnectionManager() class RedisConnectionManager implements IConnectionManagerHandler { public get name(): string { return \u0026amp;#39;redis\u0026amp;#39;; } /** * If false, the entire health check is not affected even if the health check fails. */ public get essential(): boolean { // false이면 해당 ConnectionManager의 Health가 DOWN이라도  // 전체 Health Check에서 DOWN을 반환하진 않습니다.  return true; } /** * If true, transactions are automatically processed when Transactional Annotation is set. */ public get transactional(): boolean { return true; // transaction supported  return false; // transaction not supported  } /** * If successful, resolve the Promise and return details. * If failure, reject the Promise. see {@link IHealthCheckError} */ public healthCheck(): Promise\u0026amp;lt;any\u0026amp;gt; { return Promise.resolve(); // Health is UP  // or  return Promise.reject(...); // Health is DOWN  } /** * TransactionalConnection * * If transactional is set, must implement {@link ITransactionalConnection} */ public getConnection(): Promise\u0026amp;lt;TConnection\u0026amp;gt; { // ...  } } export default installer; "});index.add({'id':11,'href':'/en/eco-system/webserver-serverless/','title':"webserver-serverless",'parent':"Eco System",'content':"This page has not yet been translated.\n\u0026lt;div class=\u0026quot;no-color-anker\u0026quot; style=\u0026quot;font-size: 1.5em\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://github.com/naraejs/naraejs\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fab fa-github\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;https://www.npmjs.com/package/@naraejs/webserver-serverless\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;https://img.shields.io/npm/v/@naraejs/webserver-serverless.svg\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;\nInstallation $ npm install --save @naraejs/webserver-serverless Basic Code import * as naraejs from \u0026amp;#39;@naraejs/core\u0026amp;#39;; import * as webserverExpress from \u0026amp;#39;@naraejs/webserver-express\u0026amp;#39;; import * as webserverServerless from \u0026amp;#39;@naraejs/webserver-serverless\u0026amp;#39;; naraejs.install(webserverExpress); naraejs.install(webserverServerless); /** * YOU MUST CALL createHandler BEFORE narae.js START */ const app = naraejs.create(); const handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.KUBELESS); app.start(); export { handler }; Supported Serverless Platforms Auto const handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.AUTO);  AWS Lambda : LAMBDA_TASK_ROOT Environment가 있는지 확인합니다. Kubeless : KUBELESS_INSTALL_VOLUME Environment가 있는지 확인합니다.  Kubeless const handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.KUBELESS); AWS Lambda NOT TESTED\nconst handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.AWS_LAMBDA); "});index.add({'id':12,'href':'/en/team/','title':"Team",'parent':"Narae.js",'content':"\r#team_members .item_box {\rmargin-bottom: 16px;\r}\r#team_members .name {\rfont-weight: bold;\r}\r#team_members .second {\rdisplay: flex;\r}\r#team_members .second .icon {\rwidth: 64px;\rheight: 64px;\rborder-radius: 50%;\rbackground: #333;\rtext-align: center;\rline-height: 64px;\rcolor: #fff;\rfont-weight: bold;\rfont-size: 1.6em;\r}\r#team_members .second .details {\r}\r#team_members .second .details table {\rborder: hidden !important;\rmargin: 0 !important;\rmargin-left: 16px !important;\r}\r#team_members .second .details tr {\rborder: hidden !important;\r}\r#team_members .second .details td {\rborder: hidden !important;\rpadding: 0 !important;\r}\r#team_members .second .details a:link { color: inherit !important; text-decoration: none;}\r#team_members .second .details a:visited { color: inherit !important; text-decoration: none;}\r#team_members .second .details a:hover { color: inherit !important; text-decoration: underline;}\r\r\r\r\r\u0026nbsp;\r\r\u0026nbsp;\u0026nbsp;\u0026nbsp;\r\r\r\r\r\r\r\r\r\rvar team_members = new Vue({\rel: '#team_members',\rmethods: {\rlocaledText: function (item) {\rvar out;\rif (typeof item === 'string') {\rreturn item;\r}\rout = item[this.currentLocale];\rif (out) {\rreturn out;\r}\rfor (var i=0; i',\rvalue: \"joseph@jc-lab.net\"\r},\r{\ricon: '',\rvalue: \"Seoul, South Korea\"\r},\r{\ricon: '',\rhtml: \"https://jsty.tistory.com\"\r},\r{\ricon: '',\rhtml: \"jc-lab\"\r}\r]\r}\r]\r}\r})\r\r"});index.add({'id':13,'href':'/en/learn/stereotypes/service/','title':"@Service",'parent':"Stereo Types",'content':"This page has not yet been translated.\nUsage import { installer, Service } from \u0026amp;#39;@naraejs/core\u0026amp;#39; @Service() class MyService { } export default installer; "});index.add({'id':14,'href':'/en/support-naraejs/','title':"Support Narae.js",'parent':"Narae.js",'content':"Narae.js is an Apache-2.0 licensed open source project and completely free to use. However, the amount of effort needed to maintain and develop new features for the project is not sustainable without proper financial backing. You can support Narae.js development via the following methods:\nOne-time Donations \r.donation_paypal:hover {\rbackground-color: #ddd;\r}\r\r\r"});index.add({'id':15,'href':'/en/categories/','title':"Categories",'parent':"Narae.js",'content':""});index.add({'id':16,'href':'/en/categories/ConnectionManager/','title':"ConnectionManager",'parent':"Categories",'content':""});index.add({'id':17,'href':'/en/categories/Logging/','title':"Logging",'parent':"Categories",'content':""});index.add({'id':18,'href':'/en/categories/EcoSystem/','title':"EcoSystem",'parent':"Categories",'content':""});index.add({'id':19,'href':'/en/categories/Learn/','title':"Learn",'parent':"Categories",'content':""});index.add({'id':20,'href':'/en/categories/StereoTypeAnnotations/','title':"StereoTypeAnnotations",'parent':"Categories",'content':""});index.add({'id':21,'href':'/en/categories/home/','title':"home",'parent':"Categories",'content':""});index.add({'id':22,'href':'/en/','title':"Narae.js",'parent':'','content':"narae.js is a node.js open source framework based on bean.ts for the purpose of control inversion (IoC),\nName \u0026ldquo;Narae\u0026rdquo; is a literary expression in pure Korean, meaning \u0026ldquo;wing\u0026rdquo;. It gives wings to developing by reducing unnecessary development and allowing more focus on business logic.\nInstallation $ npm install --save @naraejs/core Features Inversion of Control through dependency injection Implement DI through bean.ts to implement IoC. For bean creation, refer to Stereo Type Annotations.\nAspect Oriented Programming = AOP\nSimilar to Java\u0026rsquo;s Annotation, AOP is achieved using Javascript\u0026rsquo;s Decorator.\nAOP is supported through the following annotations:\n easy to use logger through @Slf annotation. automatically commit/rollback by designating transaction area through @Transactional annotation.  Aspect Oriented Programming = AOP\nIt supports AOP such as:\n easy to use logger through @Slf annotation. automatically commit/rollback by designating transaction area through @Transactional annotation.  License Apache 2.0\n"});index.add({'id':23,'href':'/en/categories/Support/','title':"Support",'parent':"Categories",'content':""});index.add({'id':24,'href':'/en/categories/Team/','title':"Team",'parent':"Categories",'content':""});index.add({'id':25,'href':'/en/tags/','title':"Tags",'parent':"Narae.js",'content':""});})();