'use strict';(function(){const indexCfg={};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','parent'],};const index=FlexSearch.create(indexCfg);window.geekdocSearchIndex=index;index.add({'id':0,'href':'/ko/learn/stereotypes/connection_manager/transaction/','title':"Transaction",'parent':"@ConnectionManager",'content':"@Transaction 어노테이션을 메서드에 적용함으로써 자동화된 Transaction 처리가 가능합니다.\n트랜잭션을 지원하려면 ConnectionManager에서 transactional가 true이어야 하며 커넥션에서 ITransactionalConnection을 구현해야 합니다.\n반드시 @Transactional 메서드 내에서 getConnection을 호출해야 하며, 중첩된 @Transactional 사용시 트랜잭션이 전파됩니다.\nExample:\n@Service() class TestService { private _testCM: TestCM; constructor(@Inject(TestCM) testCM: TestCM) { this._testCM = testCM; } @Transactional() public methodB(a: number): Promise\u0026lt;void\u0026gt; { return this._testCM.getConnection() .then((connection) =\u0026gt; { connection.insert(\u0026#39;THIRD\u0026#39;); connection.insert(\u0026#39;FOURTH\u0026#39;); }); } @Transactional() public methodA(a: number): Promise\u0026lt;void\u0026gt; { return this._testCM.getConnection() .then((connection) =\u0026gt; { connection.insert(\u0026#39;FIRST\u0026#39;); connection.insert(\u0026#39;SECOND\u0026#39;); return this.methodB(); }); } } "});index.add({'id':1,'href':'/ko/learn/stereotypes/component/','title':"@Component",'parent':"Stereo Types",'content':"Description 특별한 기능은 없는 Singletone Bean Object를 만들기 위해 사용합니다.\nUsage import { installer, Component } from \u0026#39;@naraejs/core\u0026#39; @Component() class MyComponent { } export default installer; "});index.add({'id':2,'href':'/ko/eco-system/core/','title':"core",'parent':"Eco System",'content':"\r\r\rInstallation $ npm install --save @naraejs/core "});index.add({'id':3,'href':'/ko/learn/stereotypes/','title':"Stereo Types",'parent':"Learn",'content':"Usage import { installer, Component } from \u0026#39;@naraejs/core\u0026#39; @Component() class MyComponent { } export default installer; "});index.add({'id':4,'href':'/ko/learn/','title':"Learn",'parent':"Narae.js",'content':"배우기!\n"});index.add({'id':5,'href':'/ko/learn/logging/','title':"Logging",'parent':"Learn",'content':"Simple Logging Facade 클래스에 @Slf 어노테이션을 적용하면 this.log 를 통해 Logger에 접근 가능하다.\nExample:\n@Slf({ namespace: \u0026#39;your.namespace\u0026#39; // Optional }) class SampleComponent implements Slfable { public log!: LoggerLike; public method() { this.log.info(\u0026#39;...\u0026#39;); } } "});index.add({'id':6,'href':'/ko/eco-system/webserver-express/','title':"webserver-express",'parent':"Eco System",'content':"\r\r\rInstallation $ npm install --save @naraejs/webserver-express Basic Code import * as naraejs from \u0026#39;@naraejs/core\u0026#39;; import * as webserverExpress from \u0026#39;@naraejs/webserver-express\u0026#39;; naraejs.install(webserverExpress); "});index.add({'id':7,'href':'/ko/eco-system/','title':"Eco System",'parent':"Narae.js",'content':""});index.add({'id':8,'href':'/ko/learn/stereotypes/module/','title':"@Module",'parent':"Stereo Types",'content':"Description Module를 만들 때 사용합니다.\nModule 만들기 import { INaraeCore, Module } from \u0026#39;@naraejs/core\u0026#39; const S_MyModule = Symbol(\u0026#39;MyModule\u0026#39;); @Module() export class MyModule { private _core!: INaraeCore; constructor() { makeToModule(S_MyModule, this) .order(0) .start((core: INaraeCore) =\u0026gt; { // START Handler  this._core = core; }) .stop(() =\u0026gt; { // STOP Handler  }) .build(); } } "});index.add({'id':9,'href':'/ko/learn/stereotypes/configuration/','title':"@Configuration",'parent':"Stereo Types",'content':"Description 단독으로 보통 사용되진 않으며 다른 Module과 함께 작동합니다.\nUsage import { installer, Configuration } from \u0026#39;@naraejs/core\u0026#39; @Configuration() class MyConfiguration { } export default installer; Configuration 만들기 webserver-express의 소스 참고\n"});index.add({'id':10,'href':'/ko/learn/stereotypes/connection_manager/','title':"@ConnectionManager",'parent':"Stereo Types",'content':"Usage import { installer, ConnectionManager, IConnectionManagerHandler } from \u0026#39;@naraejs/core\u0026#39; @ConnectionManager() class RedisConnectionManager implements IConnectionManagerHandler { public get name(): string { return \u0026#39;redis\u0026#39;; } /** * If false, the entire health check is not affected even if the health check fails. */ public get essential(): boolean { // false이면 해당 ConnectionManager의 Health가 DOWN이라도  // 전체 Health Check에서 DOWN을 반환하진 않습니다.  return true; } /** * If true, transactions are automatically processed when Transactional Annotation is set. */ public get transactional(): boolean { return true; // transaction supported  return false; // transaction not supported  } /** * If successful, resolve the Promise and return details. * If failure, reject the Promise. see {@link IHealthCheckError} */ public healthCheck(): Promise\u0026lt;any\u0026gt; { return Promise.resolve(); // Health is UP  // or  return Promise.reject(...); // Health is DOWN  } /** * TransactionalConnection * * If transactional is set, must implement {@link ITransactionalConnection} */ public getConnection(): Promise\u0026lt;TConnection\u0026gt; { // ...  } } export default installer; "});index.add({'id':11,'href':'/ko/eco-system/webserver-serverless/','title':"webserver-serverless",'parent':"Eco System",'content':"\r\r\rInstallation $ npm install --save @naraejs/webserver-serverless Basic Code import * as naraejs from \u0026#39;@naraejs/core\u0026#39;; import * as webserverExpress from \u0026#39;@naraejs/webserver-express\u0026#39;; import * as webserverServerless from \u0026#39;@naraejs/webserver-serverless\u0026#39;; naraejs.install(webserverExpress); naraejs.install(webserverServerless); /** * YOU MUST CALL createHandler BEFORE narae.js START */ const app = naraejs.create(); const handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.KUBELESS); app.start(); export { handler }; Supported Serverless Platforms Auto const handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.AUTO);  AWS Lambda : LAMBDA_TASK_ROOT Environment가 있는지 확인합니다. Kubeless : KUBELESS_INSTALL_VOLUME Environment가 있는지 확인합니다.  Kubeless const handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.KUBELESS); AWS Lambda NOT TESTED\nconst handler = webserverServerless.createHandler(app, webserverServerless.ServerlessPlatform.AWS_LAMBDA); "});index.add({'id':12,'href':'/ko/team/','title':"Team",'parent':"Narae.js",'content':"\r#team_members .item_box {\rmargin-bottom: 16px;\r}\r#team_members .name {\rfont-weight: bold;\r}\r#team_members .second {\rdisplay: flex;\r}\r#team_members .second .icon {\rwidth: 64px;\rheight: 64px;\rborder-radius: 50%;\rbackground: #333;\rtext-align: center;\rline-height: 64px;\rcolor: #fff;\rfont-weight: bold;\rfont-size: 1.6em;\r}\r#team_members .second .details {\r}\r#team_members .second .details table {\rborder: hidden !important;\rmargin: 0 !important;\rmargin-left: 16px !important;\r}\r#team_members .second .details tr {\rborder: hidden !important;\r}\r#team_members .second .details td {\rborder: hidden !important;\rpadding: 0 !important;\r}\r#team_members .second .details a:link { color: inherit !important; text-decoration: none;}\r#team_members .second .details a:visited { color: inherit !important; text-decoration: none;}\r#team_members .second .details a:hover { color: inherit !important; text-decoration: underline;}\r\r\r\r\r\u0026nbsp;\r\r\u0026nbsp;\u0026nbsp;\u0026nbsp;\r\r\r\r\r\r\r\r\r\rvar team_members = new Vue({\rel: '#team_members',\rmethods: {\rlocaledText: function (item) {\rvar out;\rif (typeof item === 'string') {\rreturn item;\r}\rout = item[this.currentLocale];\rif (out) {\rreturn out;\r}\rfor (var i=0; i',\rvalue: \"joseph@jc-lab.net\"\r},\r{\ricon: '',\rvalue: \"Seoul, South Korea\"\r},\r{\ricon: '',\rhtml: \"https://jsty.tistory.com\"\r},\r{\ricon: '',\rhtml: \"jc-lab\"\r}\r]\r}\r]\r}\r})\r\r"});index.add({'id':13,'href':'/ko/learn/stereotypes/service/','title':"@Service",'parent':"Stereo Types",'content':"Usage import { installer, Service } from \u0026#39;@naraejs/core\u0026#39; @Service() class MyService { } export default installer; "});index.add({'id':14,'href':'/ko/support-naraejs/','title':"Narae.js 개발 후원",'parent':"Narae.js",'content':"Narae.js는 Apache 2.0 라이센스 오픈 소스 프로젝트이며 완전 무료입니다. 그러나 프로젝트의 새로운 기능을 유지하고 개발하는데 필요한 노력의 양은 적절한 재정적 지원 없이는 지속 가능하지 않습니다. 다음 방법을 통해 Narae.js 개발을 지원할 수 있습니다.\nOne-time Donations \r.donation_paypal:hover {\rbackground-color: #ddd;\r}\r\r\r"});index.add({'id':15,'href':'/ko/categories/','title':"Categories",'parent':"Narae.js",'content':""});index.add({'id':16,'href':'/ko/categories/ConnectionManager/','title':"ConnectionManager",'parent':"Categories",'content':""});index.add({'id':17,'href':'/ko/categories/Logging/','title':"Logging",'parent':"Categories",'content':""});index.add({'id':18,'href':'/ko/categories/EcoSystem/','title':"EcoSystem",'parent':"Categories",'content':""});index.add({'id':19,'href':'/ko/categories/Learn/','title':"Learn",'parent':"Categories",'content':""});index.add({'id':20,'href':'/ko/categories/StereoTypeAnnotations/','title':"StereoTypeAnnotations",'parent':"Categories",'content':""});index.add({'id':21,'href':'/ko/categories/home/','title':"home",'parent':"Categories",'content':""});index.add({'id':22,'href':'/ko/','title':"Narae.js",'parent':'','content':"narae.js는 node.js 플랫폼에서 제어반전(IoC)를 목적으로 하는 bean.ts 기반의 node.js 오픈소스 프레임워크이다.\n이름 \u0026ldquo;나래\u0026quot;는 \u0026ldquo;날개\u0026quot;를 뜻하는 순 우리말의 문학적 표현이다. 불필요한 개발을 줄여 비즈니스 로직에 더욱 집중할 수 있도록 하여 개발에 날개를 달아 준다.\n설치 $ npm install --save @naraejs/core 특징 의존성 주입을 통한 제어반전 bean.ts를 통해 의존성 주입(DI, Dependency Injection)을 구현하여 제어반전(IoC, Inversion of Control)을 구현한다. Bean생성을 위해서는 Stereo Type Annotations을 참고한다.\n관점 지향 프로그래밍 = AOP (Aspect Oriented Programming)\nJava의 Annotation과 유사하도록, Javascript의 Decorator를 이용하여 AOP를 달성합니다.\n다음과 같은 Annotation를 통한 AOP를 지원합니다:\n @Slf 어노테이션을 통해 손쉽게 logger를 사용할 수 있습니다. @Transactional 어노테이션을 통해 트랜잭션 영역을 지정해 자동으로 commit/rollback을 할 수 있습니다.  관점 지향 프로그래밍 = AOP (Aspect Oriented Programming)\n다음과 같은 AOP를 지원합니다.\n @Slf 어노테이션을 통해 손쉽게 logger를 사용할 수 있습니다. @Transactional 어노테이션을 통해 트랜잭션 영역을 지정해 자동으로 commit/rollback을 할 수 있습니다.  라이센스 Apache License 2.0 을 따른다.\n"});index.add({'id':23,'href':'/ko/categories/Support/','title':"Support",'parent':"Categories",'content':""});index.add({'id':24,'href':'/ko/categories/Team/','title':"Team",'parent':"Categories",'content':""});index.add({'id':25,'href':'/ko/tags/','title':"Tags",'parent':"Narae.js",'content':""});})();